#include <iostream>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <sys/ipc.h>
#include <sys/wait.h>
#include <unistd.h>
#include <semaphore.h>
#include <pthread.h>

using namespace std;

struct memorija {
        pthread_mutex_t mon;
        pthread_cond_t uv[2];
        int br[2];
        int vrsta;
        int ceka[2];
        int SITI;
} *podaci;

pthread_mutexattr_t mon_atr;
pthread_condattr_t uv_atr;

int shmID;
unsigned int N,M;

void programiraj() {
        usleep(rand()%500000+500000);
}

void jedi() {
        usleep(rand()%500000+500000);
}

void ispis(int vrsta) {
        cout<<"Red Linux: ";
        for(int i=0;i<podaci->ceka[0];i++) {
                cout<<"L";

        }
        for(int i=podaci->ceka[0];i<M;i++) { //ove forove sve u if else?
                cout<<"-";
        }
        cout<<" Red MS: ";
        for(int i=0;i<podaci->ceka[1];i++) {
                cout<<"M";
        }
        for(int i=podaci->ceka[1];i<M;i++) {
                cout<<"-";
        }
        cout<<" Restoran: ";
        //ispis onih koji su trenutno u restoranu
        if(vrsta==0 || podaci->br[0]>0) {

                for(int i=0;i<podaci->br[0];i++) {
                        cout<<"L";
                }
        }
        if(vrsta==1 || podaci->br[1]>0) {
                for(int i=0;i<podaci->br[1];i++) {
                        cout<<"M";
                }
        }
        cout<<" --> ";
        //ispis kamo koji ide ovisno o vrsti
        if(vrsta==0) {
                cout<<"L";
        }

        else {
                cout<<"M";
        }
}

void udji(int vrsta) {
        pthread_mutex_lock(&podaci->mon);
        podaci->ceka[vrsta]++;
        while(podaci->br[1-vrsta]>0 || (podaci->SITI>=N && podaci->ceka[1-vrsta]>0)) {
                ispis(vrsta);cout<<" u red cekanja"<<endl;;
                pthread_cond_wait(&podaci->uv[vrsta], &podaci->mon);
        }
        podaci->br[vrsta]++;
        podaci->ceka[vrsta]--;

        if(podaci->ceka[1-vrsta]>0) podaci->SITI++;
        ispis(vrsta);cout<<" u restoran"<<endl;
        pthread_mutex_unlock(&podaci->mon);
}

void izadji(int vrsta) {
        pthread_mutex_lock(&podaci->mon);
        podaci->br[vrsta]--;
        if(podaci->br[vrsta]==0) {
                podaci->SITI=0;
                pthread_cond_broadcast(&podaci->uv[1-vrsta]);
        }
        ispis(vrsta);cout<<" iz restorana"<<endl;
        pthread_mutex_unlock(&podaci->mon);

}

void programer(int vrsta) {
        programiraj();
        udji(vrsta);
        jedi();
        izadji(vrsta);
}

void brisi(int sig) {
        pthread_mutexattr_destroy(&mon_atr);
        pthread_mutex_destroy(&podaci->mon);
        pthread_condattr_destroy(&uv_atr);
        for(int i=0;i<2;i++) {

                pthread_cond_destroy(&podaci->uv[i]);
        }
        shmdt(podaci);
        shmctl(shmID, IPC_RMID, 0);
        cout<<"\nBrisem dijeljenu memoriju i monitor"<<endl;
        exit(0);
}

int main(int argc, char *argv[]) {
        if(argc!=3) {
                cout<<"\nGreska kod unosa parametara!"<<endl;
                return 0;
        }
        N=atoi(argv[1]); //broj programera koji mogu uci u restoran ako druga vrsta ceka, inace mogu svi prve $

        M=atoi(argv[2]); //broj programera svake vrste, svaki programer predstavljen je procesom
        srand(time(0));
        shmID=shmget(IPC_PRIVATE, sizeof(memorija), 0600);
        if(shmID<0) {
                cout<<"\nGreska kod stvaranja dijeljene memorije"<<endl;
                exit(0);
        }
        podaci=(memorija*)shmat(shmID, NULL, 0);
        //pocetne vrijednosti
        podaci->br[0]=0;
        podaci->br[1]=0;
        podaci->ceka[0]=0;
        podaci->ceka[1]=0;
        podaci->SITI=0;

        podaci->vrsta=0; //podaci->vrsta=1;
        pthread_mutexattr_init(&mon_atr);
        pthread_mutexattr_setpshared(&mon_atr, PTHREAD_PROCESS_SHARED);
        pthread_mutex_init(&podaci->mon, &mon_atr);
        pthread_condattr_init(&uv_atr);
        pthread_condattr_setpshared(&uv_atr, PTHREAD_PROCESS_SHARED);
        for(int i=0;i<2;i++) {
                pthread_cond_init(&podaci->uv[i], &uv_atr);
        }
        int i;
        for(i=0;i<2*M;i++) {
                switch(fork()) {
                case 0: podaci->vrsta=1-podaci->vrsta; //0,1,0,1...
                        programer(podaci->vrsta);

                        exit(0);
                case -1: cout<<"\nGreska kod stvaranja procesa"<<endl;
                         exit(0);
                }
        }
        sigset(SIGINT, brisi);
        while(i!=0) {
                wait(NULL);
                i--;
        }
        cout<<"U restoranu vise nema nikoga i nitko ne ceka na ulazak!"<<endl;
        brisi(0);
        return 0;
}
